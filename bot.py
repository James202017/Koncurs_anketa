import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
import os
from dotenv import load_dotenv
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime, timedelta

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(",")))
SHEET_ID = os.getenv("GOOGLE_SHEET_ID")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

class Form(StatesGroup):
    name = State()
    phone = State()
    residence = State()
    goal = State()
    time = State()

def get_keyboard(options):
    kb = InlineKeyboardBuilder()
    for opt in options:
        kb.button(text=opt, callback_data=opt)
    return kb.as_markup()

def get_gsheet():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
    client = gspread.authorize(creds)
    return client.open_by_key(SHEET_ID).sheet1

@dp.message(F.text == "/start")
async def start(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä–µ–º —Ç–µ–±–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await state.set_state(Form.name)

@dp.message(Form.name)
async def get_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–û—Å—Ç–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üìû")
    await state.set_state(Form.phone)

@dp.message(Form.phone)
async def get_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer(
        "–ì–¥–µ —Ç—ã —Å–µ–π—á–∞—Å –∂–∏–≤—ë—à—å?", 
        reply_markup=get_keyboard(["–°—ä—ë–º–Ω–∞—è", "–°–≤–æ—è", "–£ —Ä–æ–¥–∏—Ç–µ–ª–µ–π", "–£ –ø–∞—Ä—Ç–Ω—ë—Ä–∞", "–î—Ä—É–≥–æ–µ"])
    )
    await state.set_state(Form.residence)

@dp.callback_query(Form.residence)
async def get_residence(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    await state.update_data(residence=call.data)
    await call.message.answer(
        "–•–æ—Ç–µ–ª(–∞) –±—ã —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–∏ –∂–∏–ª–∏—â–Ω—ã–µ —É—Å–ª–æ–≤–∏—è?", 
        reply_markup=get_keyboard(["–î–∞", "–ù–µ—Ç", "–ü–æ–∫–∞ –Ω–µ –¥—É–º–∞–ª(–∞)"])
    )
    await state.set_state(Form.goal)

@dp.callback_query(Form.goal)
async def get_goal(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    await state.update_data(goal=call.data)
    await call.message.answer("–£–∫–∞–∂–∏ –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —Ç–µ–±–µ —É–¥–æ–±–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º.")
    await state.set_state(Form.time)

@dp.message(Form.time)
async def get_time(message: Message, state: FSMContext):
    await state.update_data(time=message.text)
    data = await state.get_data()

    sheet = get_gsheet()
    sheet.append_row([
        datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        message.from_user.id,
        data['name'],
        data['phone'],
        data['residence'],
        data['goal'],
        data['time']
    ])

    await message.answer("–°–ø–∞—Å–∏–±–æ! –ï—Å–ª–∏ –Ω–µ —Ç–µ—Ä–ø–∏—Ç—Å—è ‚Äî –∂–º–∏ /sos –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π —Å—Ä–∞–∑—É.")
    await state.clear()

@dp.message(F.text == "/sos")
async def sos(message: Message):
    for admin in ADMIN_IDS:
        await bot.send_message(admin, f"SOS –æ—Ç @{message.from_user.username} ({message.from_user.id})")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())