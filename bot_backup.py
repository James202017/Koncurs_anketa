import asyncio
import logging
import re
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
import os
from dotenv import load_dotenv
from datetime import datetime, timedelta

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(",")))

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

class Form(StatesGroup):
    name = State()
    phone = State()
    residence = State()
    satisfaction = State()
    property_type = State()
    location = State()
    budget = State()
    search_status = State()
    mortgage = State()
    purchase_time = State()
    contact_method = State()
    contact_time = State()
    confirm = State()

def get_inline_keyboard(options, row_width=2):
    kb = InlineKeyboardBuilder()
    for opt in options:
        kb.button(text=opt, callback_data=opt)
    kb.adjust(row_width)
    return kb.as_markup()

def get_reply_keyboard(options, row_width=2, one_time=False, resize=True):
    kb = ReplyKeyboardBuilder()
    for opt in options:
        kb.button(text=opt)
    kb.adjust(row_width)
    return kb.as_markup(resize_keyboard=resize, one_time_keyboard=one_time)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞—è–≤–∫–∏
def format_application_message(data, user_id, is_sos=False):
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    if is_sos:
        message = f"üÜò <b>SOS –∑–∞–ø—Ä–æ—Å!</b>\n\n"
        message += f"–û—Ç: {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        message += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        message += f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
        message += f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {current_time}"
    else:
        message = f"üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!</b>\n\n"
        message += f"üë§ –ò–º—è: {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        message += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
        
        message += f"<b>–ë–ª–æ–∫ 1. –ñ–∏–ª–∏—â–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è</b>\n"
        message += f"üè† –¢–µ–∫—É—â–µ–µ –∂–∏–ª—å–µ: {data.get('residence', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        message += f"üòä –î–æ–≤–æ–ª—å–Ω—ã —É—Å–ª–æ–≤–∏—è–º–∏: {data.get('satisfaction', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        message += f"üè¢ –¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: {data.get('property_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        message += f"üìç –ñ–µ–ª–∞–µ–º–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {data.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        message += f"üí∞ –ë—é–¥–∂–µ—Ç: {data.get('budget', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        message += f"üîç –°—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞: {data.get('search_status', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
        
        message += f"<b>–ë–ª–æ–∫ 2. –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø–æ–∫—É–ø–∫–µ</b>\n"
        message += f"üè¶ –ò–ø–æ—Ç–µ–∫–∞: {data.get('mortgage', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        message += f"‚è± –ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è –ø–æ–∫—É–ø–∫–∏: {data.get('purchase_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
        
        message += f"<b>–ë–ª–æ–∫ 3. –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</b>\n"
        message += f"üìû –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏: {data.get('contact_method', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        message += f"üìÖ –£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–≤—è–∑–∏: {data.get('contact_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
        
        message += f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
        message += f"‚è∞ –í—Ä–µ–º—è –∑–∞—è–≤–∫–∏: {current_time}"
    
    return message

@dp.message(F.text == "/start")
async def start(message: Message, state: FSMContext):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å, –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–∏ –∂–∏–ª–∏—â–Ω—ã–µ —É—Å–ª–æ–≤–∏—è. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(Form.name)

@dp.message(Form.name)
async def get_name(message: Message, state: FSMContext):
    if len(message.text) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)")
        return
        
    await state.update_data(name=message.text)
    
    await message.answer(
        "üè† –ì–¥–µ –≤—ã —Å–µ–π—á–∞—Å –∂–∏–≤—ë—Ç–µ?", 
        reply_markup=get_inline_keyboard([
            "–í —Å–≤–æ–µ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ", 
            "–°–Ω–∏–º–∞—é –∫–≤–∞—Ä—Ç–∏—Ä—É", 
            "–ñ–∏–≤—É —Å —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏", 
            "–ñ–∏–≤—É —Å –ø–∞—Ä–Ω–µ–º/–¥–µ–≤—É—à–∫–æ–π", 
            "–í –æ–±—â–µ–∂–∏—Ç–∏–∏", 
            "–î—Ä—É–≥–æ–µ"
        ], row_width=2)
    )
    await state.set_state(Form.residence)

@dp.message(Form.phone)
async def get_phone(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    if message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
        if message.from_user.id and hasattr(message.from_user, 'contact') and message.from_user.contact and message.from_user.contact.phone_number:
            phone = message.from_user.contact.phone_number
        else:
            # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç –≤ –ø—Ä–æ—Ñ–∏–ª–µ, –ø—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
            keyboard = ReplyKeyboardBuilder()
            keyboard.add(KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True))
            await message.answer(
                "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX",
                reply_markup=keyboard.as_markup(resize_keyboard=True)
            )
            return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–∞
    elif message.contact and message.contact.phone_number:
        phone = message.contact.phone_number
    # –†—É—á–Ω–æ–π –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞
    else:
        phone = message.text
        if not re.match(r'^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$', phone):
            keyboard = ReplyKeyboardBuilder()
            keyboard.add(KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True))
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞",
                reply_markup=keyboard.as_markup(resize_keyboard=True)
            )
            return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await state.update_data(phone=phone)
    await message.answer(
        "–ö–æ–≥–¥–∞ –∏ –∫–∞–∫ –≤–∞–º –ª—É—á—à–µ –≤—Å–µ–≥–æ —Å–≤—è–∑–∞—Ç—å—Å—è?",
        reply_markup=get_inline_keyboard([
            "–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É",
            "–ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram",
            "–ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp",
            "E-mail",
            "–î—Ä—É–≥–æ–µ"
        ], row_width=2)
    )
    await state.set_state(Form.contact_method)

@dp.callback_query(Form.residence)
async def get_residence(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    await state.update_data(residence=call.data)
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–î—Ä—É–≥–æ–µ", –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    if call.data == "–î—Ä—É–≥–æ–µ":
        await call.message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∂–∏–ª–∏—â–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:",
            reply_markup=ReplyKeyboardRemove()
        )
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    await call.message.answer(
        "–í—ã –¥–æ–≤–æ–ª—å–Ω—ã —Ç–µ–∫—É—â–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è?", 
        reply_markup=get_inline_keyboard([
            "–î–∞, –≤—Å—ë —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç", 
            "–ù–µ—Ç, —Ö–æ—á—É —É–ª—É—á—à–∏—Ç—å", 
            "–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å"
        ], row_width=1)
    )
    await state.set_state(Form.satisfaction)

@dp.message(Form.residence)
async def get_residence_text(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–µ–∫—Å—Ç
    await state.update_data(residence=message.text)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    await message.answer(
        "–í—ã –¥–æ–≤–æ–ª—å–Ω—ã —Ç–µ–∫—É—â–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è?", 
        reply_markup=get_inline_keyboard([
            "–î–∞, –≤—Å—ë —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç", 
            "–ù–µ—Ç, —Ö–æ—á—É —É–ª—É—á—à–∏—Ç—å", 
            "–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å"
        ], row_width=1)
    )
    await state.set_state(Form.satisfaction)

@dp.callback_query(Form.satisfaction)
async def get_satisfaction(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    await state.update_data(satisfaction=call.data)
    await call.message.answer(
        "–ö–∞–∫–æ–π —Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏?", 
        reply_markup=get_inline_keyboard([
            "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –≤ –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–µ", 
            "–í—Ç–æ—Ä–∏—á–∫–∞", 
            "–î–æ–º", 
            "–¢–∞—É–Ω—Ö–∞—É—Å", 
            "–£—á–∞—Å—Ç–æ–∫ –ø–æ–¥ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ", 
            "–ü–æ–∫–∞ –Ω–µ —Ä–µ—à–∏–ª(–∞)"
        ], row_width=2)
    )
    await state.set_state(Form.property_type)

@dp.callback_query(Form.budget)
async def get_budget(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    await state.update_data(budget=call.data)
    await call.message.answer(
        "–í—ã —É–∂–µ –ø–æ–¥–±–∏—Ä–∞–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã?", 
        reply_markup=get_inline_keyboard([
            "–î–∞, –∞–∫—Ç–∏–≤–Ω–æ –∏—â—É",
            "–°–º–æ—Ç—Ä—é, –Ω–æ –ø–æ–∫–∞ –±–µ–∑ —Å–ø–µ—à–∫–∏",
            "–ù–µ—Ç, —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª(–∞) –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è",
            "–ù–µ—Ç, –Ω–æ —Ö–æ—á—É —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –Ω–∞—á–∞—Ç—å"
        ], row_width=1)
    )
    await state.set_state(Form.search_status)

@dp.callback_query(Form.property_type)
async def get_property_type(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    await state.update_data(property_type=call.data)
    
    await call.message.answer(
        "–ì–¥–µ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å?",
        reply_markup=get_inline_keyboard([
            "–í —Ç–µ–∫—É—â–µ–º –≥–æ—Ä–æ–¥–µ",
            "–í –¥—Ä—É–≥–æ–º –≥–æ—Ä–æ–¥–µ",
            "–ó–∞ –≥–æ—Ä–æ–¥–æ–º",
            "–ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é"
        ], row_width=2)
    )
    await state.set_state(Form.location)

@dp.callback_query(Form.location)
async def get_location(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥, –ø—Ä–æ—Å–∏–º —É–∫–∞–∑–∞—Ç—å –∫–∞–∫–æ–π
    if call.data == "–í –¥—Ä—É–≥–æ–º –≥–æ—Ä–æ–¥–µ":
        await call.message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥:",
            reply_markup=ReplyKeyboardRemove()
        )
        return
    
    await state.update_data(location=call.data)
    await call.message.answer(
        "–ö–∞–∫–æ–π —É –≤–∞—Å –ø—Ä–∏–º–µ—Ä–Ω—ã–π –±—é–¥–∂–µ—Ç?",
        reply_markup=get_inline_keyboard([
            "–î–æ 2 –º–ª–Ω ‚ÇΩ",
            "2‚Äì5 –º–ª–Ω ‚ÇΩ",
            "5‚Äì10 –º–ª–Ω ‚ÇΩ",
            "10+ –º–ª–Ω ‚ÇΩ",
            "–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å"
        ], row_width=2)
    )
    await state.set_state(Form.budget)

@dp.message(Form.location)
async def get_location_text(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
    await state.update_data(location=f"–í –¥—Ä—É–≥–æ–º –≥–æ—Ä–æ–¥–µ: {message.text}")
    
    await message.answer(
        "–ö–∞–∫–æ–π —É –≤–∞—Å –ø—Ä–∏–º–µ—Ä–Ω—ã–π –±—é–¥–∂–µ—Ç?",
        reply_markup=get_inline_keyboard([
            "–î–æ 2 –º–ª–Ω ‚ÇΩ",
            "2‚Äì5 –º–ª–Ω ‚ÇΩ",
            "5‚Äì10 –º–ª–Ω ‚ÇΩ",
            "10+ –º–ª–Ω ‚ÇΩ",
            "–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å"
        ], row_width=2)
    )
    await state.set_state(Form.budget)

@dp.callback_query(Form.search_status)
async def get_search_status(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    await state.update_data(search_status=call.data)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –ø–æ–∫—É–ø–∫–∏
    info_message = "–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã, —á—Ç–æ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å:\n"
    info_message += "‚úÖ —Å –≥–æ—Å–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n"
    info_message += "‚úÖ —Å —Å—É–±—Å–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–æ–π\n"
    info_message += "‚úÖ –≤ —Ä–∞—Å—Å—Ä–æ—á–∫—É\n"
    info_message += "‚úÖ –±–µ–∑ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤–∑–Ω–æ—Å–∞\n\n"
    info_message += "–ú—ã —Ä–∞—Å—Å–∫–∞–∂–µ–º –≤–∞–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —ç—Ç–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö!"
    
    await call.message.answer(info_message)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ–± –∏–ø–æ—Ç–µ–∫–µ
    await call.message.answer(
        "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –ª–∏ –≤—ã –∏–ø–æ—Ç–µ–∫—É?",
        reply_markup=get_inline_keyboard(["–î–∞", "–ù–µ—Ç", "–í–æ–∑–º–æ–∂–Ω–æ"], row_width=3)
    )
    await state.set_state(Form.mortgage)

@dp.callback_query(Form.mortgage)
async def get_mortgage(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    await state.update_data(mortgage=call.data)
    
    await call.message.answer(
        "–ö–æ–≥–¥–∞ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–∫—É–ø–∫—É?",
        reply_markup=get_inline_keyboard([
            "–í –±–ª–∏–∂–∞–π—à–∏–π –º–µ—Å—è—Ü",
            "–ß–µ—Ä–µ–∑ 3‚Äì6 –º–µ—Å—è—Ü–µ–≤",
            "–í —Ç–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞",
            "–ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é"
        ], row_width=2)
    )
    await state.set_state(Form.purchase_time)

@dp.callback_query(Form.purchase_time)
async def get_purchase_time(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    await state.update_data(purchase_time=call.data)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –ø–æ–∫—É–ø–∫–∏
    info_message = "‚ÑπÔ∏è <b>–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã, —á—Ç–æ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å:</b>\n\n"
    info_message += "‚úÖ —Å –≥–æ—Å–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n"
    info_message += "‚úÖ —Å —Å—É–±—Å–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–æ–π\n"
    info_message += "‚úÖ –≤ —Ä–∞—Å—Å—Ä–æ—á–∫—É\n"
    info_message += "‚úÖ –±–µ–∑ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤–∑–Ω–æ—Å–∞\n\n"
    info_message += "–ú—ã —Ä–∞—Å—Å–∫–∞–∂–µ–º –≤–∞–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —ç—Ç–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã."
    
    await call.message.answer(info_message)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ–± –∏–º–µ–Ω–∏
    await call.message.answer(
        "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è)",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(Form.name)

@dp.callback_query(Form.contact_method)
async def get_contact_method(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    await state.update_data(contact_method=call.data)
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–î—Ä—É–≥–æ–µ", –ø—Ä–æ—Å–∏–º —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    if call.data == "–î—Ä—É–≥–æ–µ":
        await call.message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:",
            reply_markup=ReplyKeyboardRemove()
        )
        return
    
    await call.message.answer(
        "–£–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è –¥–ª—è —Å–≤—è–∑–∏:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(Form.contact_time)

@dp.message(Form.contact_method)
async def get_contact_method_text(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏
    await state.update_data(contact_method=message.text)
    
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è –¥–ª—è —Å–≤—è–∑–∏:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(Form.contact_time)

@dp.message(Form.contact_time)
async def get_contact_time(message: Message, state: FSMContext):
    await state.update_data(contact_time=message.text)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    keyboard = ReplyKeyboardBuilder()
    keyboard.add(KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True))
    keyboard.add(KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"))
    
    await message.answer(
        "üì± –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏",
        reply_markup=keyboard.as_markup(resize_keyboard=True)
    )
    await state.set_state(Form.phone)

@dp.message(Form.phone)
async def get_phone(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç
    if message.contact is not None:
        phone = message.contact.phone_number
        await process_phone(message, state, phone)
    elif message.text and re.match(r'^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$', message.text):
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é –∏ –æ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É
        phone = message.text
        await process_phone(message, state, phone)
    else:
        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–Ω—Ç–∞–∫—Ç
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç' –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX",
            reply_markup=get_contact_keyboard()
        )

async def process_phone(message: Message, state: FSMContext, phone: str):
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    phone = re.sub(r'\D', '', phone)
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–∞—Ç—É —Å 7 –≤ –Ω–∞—á–∞–ª–µ
    if phone.startswith('8'):
        phone = '7' + phone[1:]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    await state.update_data(phone=phone)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    data = await state.get_data()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_message = f"üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
    
    # –ë–ª–æ–∫ 1. –ñ–∏–ª–∏—â–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
    confirm_message += f"<b>–ë–ª–æ–∫ 1. –ñ–∏–ª–∏—â–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è</b>\n"
    confirm_message += f"üë§ –ò–º—è: {data['name']}\n"
    confirm_message += f"üè† –¢–µ–∫—É—â–µ–µ –∂–∏–ª—å–µ: {data.get('residence', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    confirm_message += f"üòä –î–æ–≤–æ–ª—å–Ω—ã —É—Å–ª–æ–≤–∏—è–º–∏: {data.get('satisfaction', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    confirm_message += f"üè¢ –¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: {data.get('property_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    confirm_message += f"üìç –ñ–µ–ª–∞–µ–º–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {data.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    confirm_message += f"üí∞ –ë—é–¥–∂–µ—Ç: {data.get('budget', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    confirm_message += f"üîç –°—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞: {data.get('search_status', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
    
    # –ë–ª–æ–∫ 2. –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø–æ–∫—É–ø–∫–µ
    confirm_message += f"<b>–ë–ª–æ–∫ 2. –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø–æ–∫—É–ø–∫–µ</b>\n"
    confirm_message += f"üè¶ –ò–ø–æ—Ç–µ–∫–∞: {data.get('mortgage', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    confirm_message += f"‚è± –ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è –ø–æ–∫—É–ø–∫–∏: {data.get('purchase_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
    
    # –ë–ª–æ–∫ 3. –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    confirm_message += f"<b>–ë–ª–æ–∫ 3. –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</b>\n"
    confirm_message += f"üìû –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏: {data.get('contact_method', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    confirm_message += f"üìÖ –£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–≤—è–∑–∏: {data.get('contact_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    confirm_message += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: +{phone}\n\n"
    
    confirm_message += "–í—Å—ë –≤–µ—Ä–Ω–æ?"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    await message.answer(
        confirm_message,
        reply_markup=get_inline_keyboard(["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚ùå –ò–∑–º–µ–Ω–∏—Ç—å"], row_width=2)
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
     await state.set_state(Form.confirm)
    confirm_message += f"üè¢ –¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: {data.get('property_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    confirm_message += f"üìç –ñ–µ–ª–∞–µ–º–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {data.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    confirm_message += f"üí∞ –ë—é–¥–∂–µ—Ç: {data.get('budget', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    confirm_message += f"üîç –°—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞: {data.get('search_status', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
    
    # –ë–ª–æ–∫ 2. –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø–æ–∫—É–ø–∫–µ
    confirm_message += f"<b>–ë–ª–æ–∫ 2. –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø–æ–∫—É–ø–∫–µ</b>\n"
    confirm_message += f"üè¶ –ò–ø–æ—Ç–µ–∫–∞: {data.get('mortgage', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    confirm_message += f"‚è± –ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è –ø–æ–∫—É–ø–∫–∏: {data.get('purchase_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
    
    # –ë–ª–æ–∫ 3. –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    confirm_message += f"<b>–ë–ª–æ–∫ 3. –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</b>\n"
    confirm_message += f"üìû –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏: {data.get('contact_method', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    confirm_message += f"üìÖ –£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–≤—è–∑–∏: {data.get('contact_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    confirm_message += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
    
    confirm_message += "–í—Å—ë –≤–µ—Ä–Ω–æ?"
    
    await message.answer(
        confirm_message,
        reply_markup=get_inline_keyboard(["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚ùå –ò–∑–º–µ–Ω–∏—Ç—å"], row_width=2)
    )
    await state.set_state(Form.confirm)

@dp.callback_query(Form.confirm)
async def confirm_data(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    
    if call.data == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        data = await state.get_data()
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admin_message = format_application_message(data, call.from_user.id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            sent_successfully = False
            for admin in ADMIN_IDS:
                try:
                    await bot.send_message(admin, admin_message)
                    sent_successfully = True
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin}: {e}")
            
            if sent_successfully:
                await call.message.answer(
                    "‚úÖ –°–ø–∞—Å–∏–±–æ! –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.\n\n" +
                    "–ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å —Ç–æ–±–æ–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.\n\n" +
                    "–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ —Å—Ä–æ—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–∂–º–∏ /sos, –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.",
                    reply_markup=get_reply_keyboard(["üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞", "‚ùì –ü–æ–º–æ—â—å"], row_width=2)
                )
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                await call.message.answer(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                    reply_markup=get_reply_keyboard(["üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞", "‚ùì –ü–æ–º–æ—â—å"], row_width=2)
                )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏: {e}")
            await call.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                reply_markup=get_reply_keyboard(["üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞", "‚ùì –ü–æ–º–æ—â—å"], row_width=2)
            )
    else:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–ò–∑–º–µ–Ω–∏—Ç—å"
        await call.message.answer(
            "üîÑ –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(Form.name)
    
    if call.data == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        await state.clear()

@dp.message(F.text == "/sos")
async def sos(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    data = await state.get_data()
    user_info = f"@{message.from_user.username}" if message.from_user.username else f"ID: {message.from_user.id}"
    user_name = f"{message.from_user.first_name} {message.from_user.last_name or ''}".strip()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if 'name' not in data:
        data['name'] = user_name
    if 'phone' not in data:
        data['phone'] = "–ù–µ —É–∫–∞–∑–∞–Ω"
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer(
        "üÜò –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å —Ç–æ–±–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=get_reply_keyboard(["üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞", "‚ùì –ü–æ–º–æ—â—å"], row_width=2)
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º SOS-—Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    sos_message = format_application_message(data, message.from_user.id, is_sos=True)
    
    sent_successfully = False
    for admin in ADMIN_IDS:
        try:
            await bot.send_message(admin, sos_message)
            sent_successfully = True
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ SOS –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin}: {e}")

@dp.message(F.text == "üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")
async def new_request(message: Message, state: FSMContext):
    await start(message, state)

@dp.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def help_command(message: Message):
    await message.answer(
        "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:</b>\n\n" +
        "‚Ä¢ /start - –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–¥–±–æ—Ä –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n" +
        "‚Ä¢ /sos - –°—Ä–æ—á–Ω–∞—è —Å–≤—è–∑—å —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º\n" +
        "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n" +
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–∂–º–∏—Ç–µ /sos, –∏ –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=get_reply_keyboard(["üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞"], row_width=1)
    )

@dp.message(F.text == "/help")
async def help_command_alt(message: Message):
    await help_command(message)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())